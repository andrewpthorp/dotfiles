"let g:solarized_termcolors=16
"color solarized
color freya

set autoread
set expandtab
set nowrap

let $JS_CMD='node'

if has("autocmd")
  autocmd User Rails  set tabstop=2 softtabstop=2 shiftwidth=2 expandtab
endif

let mapleader = ","

"update the system settings from my vimrc file
map <Leader>u :source ~/.vimrc
"copy/paste
map <Leader>c :w! ~/.vim_cpy_pst<cr>
map <Leader>v :r ~/.vim_cpy_pst<cr>
map <Leader>h :nohlsearch<cr>
map <Leader># :s/^/#/<cr>:nohlsearch<cr>
map <Leader>n :NERDTreeToggle<CR>
map <Leader>l :set list!<CR>


" Strip trailing whitespace
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" Textmate style indenting
nmap <D-[> <<
nmap <D-]> >>
vmap <D-[> <gv
vmap <D-]> >gv

" Spit out rspec args to file
" Thanks to Sam Goldstein (http://drasticcode.com/2009/8/27/how-to-run-rspec-specs-from-vim)
" Thanks to Ian Smith-Heisters
function! SpecArgs(args)
  if exists("b:rails_root")
    let fname = b:rails_root . "/.spec_args"
  else
    let fname = "~/.spec_args"
  end

  let current = expand("%")
  let spec_args = [" " . current . " -cfn " . a:args]
  call writefile(spec_args, fname)
endfunction

" Mappings
" run one rspec example or describe block based on cursor position
map <Leader>s :call SpecArgs("-l " . <C-r>=line('.')<CR>)<cr>

au BufRead,BufNewFile Vagrantfile set expandtab
au BufRead,BufNewFile .rvmrc set ft=sh
au BufRead,BufNewFile *.god set ft=ruby

