" map <Leader> away from the default
let mapleader=','

" source ~/.vimrc.before if it exists
if filereadable(expand('~/.vimrc.before'))
  source ~/.vimrc.before
endif

" use Vim settings, rather then Vi settings (much better!)
" this must be first, because it changes other options as a side effect
if &compatible
  set nocompatible
endif

" General Config {{{
" ==================

set mouse=a                     " enable mouse use in all modes
set lazyredraw
set splitright                  " opens vertical split right of current window
set splitbelow                  " opens horizontal split below current window
set noshowmode                  " don't show current mode down the bottom
set autoread                    " reload files changed outside vim
set clipboard=unnamed           " Use system clipboard
set hidden                      " buffers can exist in the background
set shortmess=aoOstTWAI         " list of flags to make messages shorter
set nofoldenable                " disable folding
set nobackup                    " dont keep a backup after overwriting a file
set nowritebackup               " dont write a backup before overwriting a file
set noswapfile                  " dont use a swap file
set exrc
set secure                      " see :help secure

if has('nvim')
  set inccommand=split
endif

" Line Numbers, Marks, etc
set number                      " show line numbers
set relativenumber              " show relative line numbers
set scrolloff=10                " show 10 lines around cursor (scroll close to margins)
set sidescrolloff=25            " same as scrolloff, but for horizontal
set viminfo='100,f1             " save up to 100 marks, enable capital marks
set textwidth=80
set colorcolumn=+1,+2           " put a mark at +1,+2 (col 81/82 normally)
set cursorline                  " show line on current cursor

" History / Undo
if isdirectory($HOME . '/.vim_undo') == 0
  :silent !mkdir -p ~/.vim_undo > /dev/null 2>&1
endif
set undodir=~/.vim_undo         " list of directories for undo files
set undofile                    " save/restore undo history

" Text
set nowrap                                " don't wrap lines
set linebreak                             " wrap lines at convenient points (:help breakat)
set smartindent                           " do clever auto indenting
set shiftwidth=2                          " use 2 spaces for auto indent
set tabstop=2                             " number of spaces a <Tab> in the text stands for
set expandtab                             " expand <Tab> to spaces in insert mode
set softtabstop=2                         " set <Tab> to 2 spaces in insert mode
set list                                  " show <Tab> as ^I and EOL as $
set listchars=tab:\ \ ,trail:Â·            " list strings used for list mode
set spellfile=~/.vim/spellfile.utf-8.add  " file that `zg` adds good words to

" Auto Completion
set dictionary=/usr/share/dict/words    " list of dictionary files for keyword completion
set wildmode=list:longest               " specifies how command line completion works

" patterns to ignore for file name completion:
set wildignore=*.o,*.obj,*~,.hg,.git,.svn,.vim-tags,*.swp
set wildignore+=*.spl,*.DS_Store,*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*/tmp,*/log,*/vendor/bundle,*/vendor/cache
set wildignore+=*/bin,*.zip,*vim/backups*,*.vim_undo*


" custom mappings
nnoremap <F6> :set invpaste paste?<CR>
set pastetoggle=<F6>
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>
nnoremap <silent> <Leader>r :source ~/.vimrc<CR>:echo 'Reloaded ~/.vimrc'<CR>
nnoremap <silent> <leader>x :exit<CR>

" force my brain to stop using arrows and esc
map <Left> <nop>
map <Right> <nop>
map <Up> <nop>
map <Down> <nop>
" imap <esc> <nop>
inoremap jk <esc>

" wrap autocmd in a group to prevent duplicates
augroup personal
  autocmd!
  " flatfiles dont strip trailing white spaces
  autocmd BufWritePre * if &ft != 'text' | :%s/\s\+$//e
  " java tab/space config
  autocmd FileType java setlocal shiftwidth=8 softtabstop=8 tabstop=8 noexpandtab
  " open NERDTree when vim opens
  " autocmd vimenter * NERDTree
  " dont open stuff in nerdtree, however, go back to it if it was the focus
  " autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif
augroup END
" }}}

" Vim-Plug (replacd neobundle) {{{
" ==========

" Automatically install it, if it's not installed yet.
if empty(glob('~/.config/nvim/autoload/plug.vim'))
  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Plug 'mileszs/ack.vim'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'sheerun/vim-polyglot'
Plug 'chriskempson/base16-vim'
Plug 'navarasu/onedark.nvim'
"Plug 'Quramy/vim-js-pretty-template'
" Plug 'dense-analysis/ale'
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'fatih/vim-go'
" Plug 'junegunn/fzf'
" Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-emoji'
Plug 'lokaltog/vim-easymotion'
Plug 'liuchengxu/vista.vim'
Plug 'luochen1990/rainbow'
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'peitalin/vim-jsx-typescript'
Plug 'plasticboy/vim-markdown'
Plug 'preservim/nerdcommenter'
Plug 'prettier/vim-prettier'
Plug 'scrooloose/nerdtree'
Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-surround'
Plug 'itchyny/lightline.vim'
Plug 'vim-ruby/vim-ruby'
Plug 'vim-scripts/L9'
Plug 'vim-scripts/ZoomWin'
Plug 'saadparwaiz1/cmp_luasnip'
Plug 'github/copilot.vim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.6'}
Plug 'APZelos/blamer.nvim'
Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' }
Plug 'nvim-treesitter/nvim-treesitter-textobjects'
Plug 'mbbill/undotree'

" LSP Stuff
Plug 'ray-x/lsp_signature.nvim'
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'L3MON4D3/LuaSnip'

call plug#end()

" Display (Syntax, Indentation, Filetypes, etc)
" =============================================

filetype plugin on
filetype indent on

set termguicolors
nmap <leader><leader>d :colorscheme base16-onedark<CR>
nmap <leader><leader>l :colorscheme base16-one-light<CR>
nnoremap gp :silent %!prettier --stdin-filepath %<CR>

" hi Comment      cterm=italic
" hi Normal       ctermbg=NONE guibg=NONE
" hi LineNr       ctermbg=NONE guibg=NONE
" hi SignColumn   ctermbg=NONE guibg=NONE
" hi ColorColumn  guibg=#33363b
" hi Comment      guifg=#5C6370 ctermfg=59

" filetype overrides
augroup filetypes
  autocmd!
  " autocmd FileType * setlocal formatprg=
  autocmd BufReadPost * silent! lcd .
  " Docker
  autocmd BufNewFile,BufRead Dockerfile* set filetype=Dockerfile
  " Indent-based folding
  autocmd BufRead,BufNewFile,BufWrite *.{coffee,json,py,yaml,yml} set foldmethod=indent
  " JavaScript
  autocmd BufRead,BufNewFile,BufWrite *.{js.asp,es6,jsx,mjs} set filetype=javascript
  autocmd BufRead,BufNewFile,BufWrite *.{js.asp,es6,jsx,mjs}.symlink set filetype=javascript
  autocmd BufRead,BufNewFile,BufWrite hyper.js.symlink set filetype=javascript
  autocmd BufRead,BufNewFile,BufWrite .{babelrc,eslintrc,prettierrc} set filetype=json
  autocmd BufRead,BufNewFile,BufWrite {*bashrc*,*.bash} set filetype=sh
  autocmd BufWritePre *.js Prettier
  autocmd BufWritePre *.jsx Prettier
  autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
  autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear
  " JSON
  autocmd BufNewFile,BufRead *.json set filetype=json
  autocmd FileType json setlocal formatprg=jq\ -sM\ .
  " Writing
  autocmd BufRead,BufNewFile,BufWrite *.md set syntax=markdown.vimwiki
  autocmd Filetype md set wrap linebreak nolist nonumber norelativenumber spell textwidth=80
  autocmd Filetype txt set wrap linebreak nolist spell textwidth=80
  "" Property lists
  autocmd BufRead,BufNewFile,BufWrite *.{plist,xml} set filetype=xml
  " Ruby
  autocmd BufRead,BufNewFile,BufWrite Brewfile set syntax=ruby
  autocmd BufRead,BufNewFile,BufWrite {Capfile,Gemfile,Guardfile,Procfile,Rakefile,Thorfile,Vagrantfile,.ru,.caprc,.irbrc,.jbuilder,.rake} set filetype=ruby
augroup END


" List Helpful (Custom) Commands:
" ===============================

" Copy filename to keyboard
nmap <leader><leader>cs :let @*=expand("%")<CR>
nmap <leader><leader>cl :let @*=expand("%:p")<CR>

" Pretty XML Indentation, not mapped, use :PrettyXML
function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " this will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

" URL Decoding, not mapped, use :URLDecode
function! URLDecode()
  exe "s/%2B/+/g"
  exe "s/%3D/=/g"
  exe "s/%0A//g"
endfunction
command! URLDecode call URLDecode()

" Fix the issue where :W doesn't save.
command! W  write

lua << EOF
  local lspconfig = require('lspconfig')
  local lsp_servers = {
		'eslint', -- https://github.com/hrsh7th/vscode-langservers-extracted
		'html', -- https://github.com/hrsh7th/vscode-langservers-extracted
		'jsonls', -- https://github.com/hrsh7th/vscode-langservers-extracted
		'tsserver', -- https://github.com/typescript-language-server/typescript-language-server
    'graphql',
    'ruby_lsp', -- https://github.com/Shopify/ruby-lsp
    'vimls', -- https://github.com/iamcco/vim-language-server
    'lua_ls', -- https://github.com/LuaLS/lua-language-server
    'gopls', -- https://cs.opensource.google/go/x/tools/+/refs/tags/gopls/v0.15.3:gopls/doc/vim.md
		-- 'denols', -- https://github.com/denoland/deno
	}

  lspconfig_on_attach = function(client, buffer)
    local opts = { noremap=true, silent=true, buffer=buffer }
		vim.keymap.set('n', ']e', vim.diagnostic.goto_next, opts)
		vim.keymap.set('n', '[e', vim.diagnostic.goto_prev, opts)
		vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
		vim.keymap.set('n', 'gy', vim.lsp.buf.type_definition, opts)
		vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
		vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
		vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
		vim.keymap.set('n', '<Leader>=', vim.lsp.buf.format, opts)
		vim.keymap.set('n', '<leader><leader>h', vim.lsp.buf.hover, opts)
		vim.keymap.set('n', '<leader><leader>a', vim.lsp.buf.code_action, opts)
		vim.keymap.set('n', '<leader><leader>f', function() vim.lsp.buf.code_action({ context = { only = {"source.fixAll"} }, apply = true }) end, opts)
		vim.keymap.set('n', '<leader><leader>r', vim.lsp.buf.rename, opts)
		vim.keymap.set('n', '<A-q>', function() vim.lsp.stop_client(vim.lsp.get_active_clients()) end, opts)

		vim.cmd [[ command! Format execute 'lua vim.lsp.buf.format()' ]]
		vim.cmd [[ command! LSPInfo execute 'lua print(vim.inspect(vim.lsp.buf_get_clients()))' ]]

		vim.cmd [[ autocmd CursorHold * lua vim.diagnostic.open_float(nil, {focus=false, scope="cursor"}) ]]

		require'lsp_signature'.on_attach()
  end

  lspconfig_capabilities = require('cmp_nvim_lsp').default_capabilities()

	for _, lsp in ipairs(lsp_servers) do
		lspconfig[lsp].setup {
			on_attach = lspconfig_on_attach,
			capabilities = lspconfig_capabilities,
		}
	end

  local luasnip = require 'LuaSnip'

  local has_words_before = function()
		local line, col = unpack(vim.api.nvim_win_get_cursor(0))
		return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
	end

  -- nvim-cmp
  local cmp = require 'cmp'
	cmp.setup {
		snippet = {
			expand = function(args)
				luasnip.lsp_expand(args.body)
			end,
		},
		preselect = cmp.PreselectMode.None,
		mapping = cmp.mapping.preset.insert({
			['<C-p>'] = cmp.mapping.select_prev_item(),
			['<C-n>'] = cmp.mapping.select_next_item(),
			['<C-d>'] = cmp.mapping.scroll_docs(-4),
			['<C-f>'] = cmp.mapping.scroll_docs(4),
			['<C-Space>'] = cmp.mapping.complete(),
			['<C-e>'] = cmp.mapping.close(),
			['<CR>'] = cmp.mapping.confirm {
        -- use Insert, which is the default, for now
				-- behavior = cmp.ConfirmBehavior.Replace,
				select = true,
			},
			['<Tab>'] = function(fallback)
				if cmp.visible() then
				cmp.select_next_item()
				elseif luasnip.expand_or_jumpable() then
				luasnip.expand_or_jump()
				elseif has_words_before() then
				cmp.complete()
				else
				fallback()
				end
			end,
			['<S-Tab>'] = function(fallback)
				if cmp.visible() then
				cmp.select_prev_item()
				elseif luasnip.jumpable(-1) then
				luasnip.jump(-1)
				else
				fallback()
				end
			end,
		}),
		sources = {
			{ name = 'nvim_lsp' },
			{ name = 'luasnip' },
		},
	}

  require('nvim-treesitter.configs').setup {
    ensure_installed = "all",
    ignore_install = { "phpdoc" },
    highlight = {
      enable = true, -- false will disable the whole extension

      -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
      -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
      -- Using this option may slow down your editor, and you may see some duplicate highlights.
      -- Instead of true it can also be a list of languages
      additional_vim_regex_highlighting = false,
    },
    incremental_selection = {
      enable = true,
      keymaps = {
        init_selection = 'gnn',
        node_incremental = 'grn',
        scope_incremental = 'grc',
        node_decremental = 'grm',
      },
    },
    -- indent = {
    -- enable = true,
    -- },
    textobjects = {
      select = {
        enable = true,
        lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
        keymaps = {
          -- You can use the capture groups defined in textobjects.scm
          ['af'] = '@function.outer',
          ['if'] = '@function.inner',
          ['ac'] = '@class.outer',
          ['ic'] = '@class.inner',
        },
      },
      move = {
        enable = true,
        set_jumps = true, -- whether to set jumps in the jumplist
        goto_next_start = {
          [']m'] = '@function.outer',
          [']]'] = '@class.outer',
        },
        goto_next_end = {
          [']M'] = '@function.outer',
          [']['] = '@class.outer',
        },
        goto_previous_start = {
          ['[m'] = '@function.outer',
          ['[['] = '@class.outer',
        },
        goto_previous_end = {
          ['[M'] = '@function.outer',
          ['[]'] = '@class.outer',
        },
      },
    },
    -- nvim-ts-rainbow
    rainbow = {
      enable = false,
      extended_mode = true,
    },
    -- nvim-ts-autotag
    autotag = {
      enable = true,
      enable_close_on_slash = false,
    },
  }

  -- Open help window in a vertical split to the right.
  vim.api.nvim_create_autocmd("BufWinEnter", {
    group = vim.api.nvim_create_augroup("help_window_right", {}),
    pattern = { "*.txt" },
    callback = function()
    if vim.o.filetype == 'help' then vim.cmd.wincmd("L") end
      end
  })

  oneday = require('onedark')
  oneday.setup  {
    -- Main options --
    style = 'dark', -- Default theme style. Choose between 'dark', 'darker', 'cool', 'deep', 'warm', 'warmer' and 'light'
    transparent = false,  -- Show/hide background
    term_colors = true, -- Change terminal color as per the selected theme style
    ending_tildes = false, -- Show the end-of-buffer tildes. By default they are hidden
    cmp_itemkind_reverse = false, -- reverse item kind highlights in cmp menu

    -- toggle theme style ---
    toggle_style_key = nil, -- keybind to toggle theme style. Leave it nil to disable it, or set it to a string, for example "<leader>ts"
    toggle_style_list = {'dark', 'darker', 'cool', 'deep', 'warm', 'warmer', 'light'}, -- List of styles to toggle between

    -- Change code style ---
    -- Options are italic, bold, underline, none
    -- You can configure multiple style with comma separated, For e.g., keywords = 'italic,bold'
    code_style = {
        comments = 'italic',
        keywords = 'none',
        functions = 'none',
        strings = 'none',
        variables = 'none'
    },

    -- Lualine options --
    lualine = {
        transparent = false, -- lualine center bar transparency
    },

    -- Custom Highlights --
    colors = {}, -- Override default colors
    highlights = {
      ["@keyword.import"] = {fg = '$light_grey'},
      ["@keyword.return"] = {fg = '$cyan'},
      ["@tag"] = {fg = '$bg_yellow'}
    }, -- Override highlight groups

    -- Plugins Config --
    diagnostics = {
        darker = true, -- darker colors for diagnostic
        undercurl = true,   -- use undercurl instead of underline for diagnostics
        background = true,    -- use background color for virtual text
    },
  }
  oneday.load()

EOF
