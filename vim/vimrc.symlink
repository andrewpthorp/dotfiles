" Vim
" ===

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Automatically reload vimrc when it's saved
autocmd! BufWritePost vimrc.symlink so ~/.vimrc

" Source ~/.vimrc.before if it exists
if filereadable(expand('~/.vimrc.before'))
  source ~/.vimrc.before
endif

" Strip whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" Toggle paste
nnoremap <F6> :set invpaste paste?<CR>
set pastetoggle=<F6>

" Yank from cursor to end of line
nnoremap Y y$

" Space bar to turn off highlighting
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" redraw!
nnoremap <leader>rr :redraw!<CR>

" reload .vimrc
nnoremap <leader>r :source ~/.vimrc<CR>:echo 'Reloaded ~/.vimrc'<CR>

" custom grep
command! -nargs=+ CustomGrep :execute "silent grep! -r <args>" | copen | redraw!
nnoremap <leader>g :CustomGrep

" Vundle Config
" =============

filetype off
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Additional Plugins
Plugin 'vim-scripts/L9'
Plugin 'vim-scripts/FuzzyFinder'
Plugin 'vim-scripts/ZoomWin'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'kchmck/vim-coffee-script'
Plugin 'plasticboy/vim-markdown'
Plugin 'tpope/vim-rails'
Plugin 'vim-ruby/vim-ruby'
Plugin 'mattn/gist-vim'
Plugin 'tpope/vim-surround'
Plugin 'mattn/webapi-vim'
Plugin 'gregsexton/gitv'
Plugin 'tpope/vim-commentary'
Plugin 'vim-scripts/php.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'bling/vim-airline'
Plugin 'slim-template/vim-slim'
Plugin 'fatih/vim-go'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/syntastic'
Plugin 'rking/ag.vim'

call vundle#end()

" General Config
" ==============

let mapleader=','
set encoding=utf-8
set number                      " Line numbers are good
set backspace=indent,eol,start  " Allow backspace in insert mode
set history=1000                " Store lots of :cmdline history
set showcmd                     " Show incomplete cmds down the bottom
set showmode                    " Show current mode down the bottom
set gcr=a:blinkon0              " Disable cursor blink
set autoread                    " Reload files changed outside vim
set laststatus=2                " Always show status line
set clipboard=unnamed           " Use system clipboard
set hidden                      " Buffers can exist in the background
set splitright                  " Opens vertical split right of current window
set splitbelow                  " Opens horizontal split below current window
set colorcolumn=81              " Put a mark at the 81st column for text
set textwidth=0                 " Hack the textwidth so the colorcolumn won't force us to the next line
"set shortmess=filnxtToOI       " see :help shortmess
                                " http://items.sjbach.com/319/configuring-vim-right
" Syntax
" ======

syntax on
syntax enable
set t_Co=256
colorscheme solarized
set background=dark
call togglebg#map("<F5>")

" Mouse
" ======

" Send more characters for redraws
set ttyfast

" Enable mouse use in all modes
set mouse=a

" Set this to the name of your terminal that supports mouse codes.
" Must be one of: xterm, xterm2, netterm, dec, jsbterm, pterm
set ttymouse=xterm2

" Filetype overrides
" ==================

autocmd! BufRead,BufNewFile *.jbuilder,Gemfile,Rakefile,Procfile,Guardfile setf ruby
au BufRead,BufNewFile /^[A-Z]+\w*file$/ setf ruby
au BufRead,BufNewFile *.thor set filetype=ruby
au BufRead,BufNewFile Guardfile set filetype=ruby
au BufRead,BufNewFile */nginx/*.conf set filetype=nginx
au BufRead,BufNewFile *.zsh-theme set ft=zsh
au BufRead,BufNewFile *.jbuilder setf ruby
au BufRead,BufNewFile *.jeco setf html
au BufRead,BufNewFile *.jss set filetype=css
au BufRead,BufNewFile *.hbs set filetype=mustache
au BufRead,BufNewFile *.go set filetype=go
au BufRead,BufNewFile *.jade set filetype=jade

" Search Settings
" ===============

set incsearch        " Find the next match as we type the search
set hlsearch         " Hilight searches by default
set viminfo='100,f1  " Save up to 100 marks, enable capital marks

" Turn Off Swap Files
" ===================

set noswapfile
set nobackup
set nowritebackup

" Persistent Undo
" ===============

" Keep undo history across sessions, by storing in file
" Only works in MacVim (gui) mode
if has('gui_running')
  set undodir=~/.vim/backups
  set undofile
endif

" Indentation and Display
" =======================

set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

filetype plugin indent on

set list listchars=tab:\ \ ,trail:Â·   " Display tabs and trailing spaces visually
set nowrap                            " Don't wrap lines
set linebreak                         " Wrap lines at convenient points

" Folds
" =====

set foldmethod=indent   " Fold based on indent
set foldnestmax=3       " Deepest fold is 3 levels
set nofoldenable        " Don't fold by default

" Completion
" ==========

set wildmode=list:longest
set wildmenu                    " Enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~     " Stuff to ignore when tab completing
set wildignore+=*vim/backups*

" Scrolling
" =========

" Start scrolling when we're getting close to margins
set scrolloff=10
set sidescrolloff=15
set sidescroll=1

" Status Line
" ===========

"set statusline=                                 " Override default
"set statusline+=%{fugitive#statusline()[4:-2]}  " Show fugitive git info
"set statusline+=\ %f\ %m\ %r                    " Show filename/path
"set statusline+=%=                              " Set right-side status info after this line
"set statusline+=%l/%L:%v                        " Set <line number>/<total lines>:<column>
"set statusline+=\                               " Set ending space


" Airline Config
" =============

let g:airline_theme='bubblegum'
"let g:airline#extensions#tabline#enabled = 1     " airline tabline (buffers)

" Automatically Pretty XML
" =============

function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction

command! PrettyXML call DoPrettyXML()
