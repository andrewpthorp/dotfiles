" map <Leader> away from the default
let mapleader=','

" source ~/.vimrc.before if it exists
if filereadable(expand('~/.vimrc.before'))
  source ~/.vimrc.before
endif

" use Vim settings, rather then Vi settings (much better!)
" this must be first, because it changes other options as a side effect
if &compatible
  set nocompatible
endif

" General Config {{{
" ==================

set mouse=a                     " enable mouse use in all modes
set lazyredraw
set splitright                  " opens vertical split right of current window
set splitbelow                  " opens horizontal split below current window
set noshowmode                  " don't show current mode down the bottom
set autoread                    " reload files changed outside vim
set clipboard=unnamed           " Use system clipboard
set hidden                      " buffers can exist in the background
set shortmess=aoOstTWAI         " list of flags to make messages shorter
set nofoldenable                " disable folding
set nobackup                    " dont keep a backup after overwriting a file
set nowritebackup               " dont write a backup before overwriting a file
set noswapfile                  " dont use a swap file
set exrc
set secure                      " see :help secure

if has('nvim')
  set inccommand=split
endif

" Line Numbers, Marks, etc
set number                      " show line numbers, (relativelinenumber)
set scrolloff=10                " show 10 lines around cursor (scroll close to margins)
set sidescrolloff=25            " same as scrolloff, but for horizontal
set viminfo='100,f1             " save up to 100 marks, enable capital marks
set textwidth=80
set colorcolumn=+1,+2           " put a mark at +1,+2 (col 81/82 normally)

" History / Undo
if isdirectory($HOME . '/.vim_undo') == 0
  :silent !mkdir -p ~/.vim_undo > /dev/null 2>&1
endif
set undodir=~/.vim_undo         " list of directories for undo files
set undofile                    " save/restore undo history

" Text
set nowrap                                " don't wrap lines
set linebreak                             " wrap lines at convenient points (:help breakat)
set smartindent                           " do clever auto indenting
set shiftwidth=2                          " use 2 spaces for auto indent
set tabstop=2                             " number of spaces a <Tab> in the text stands for
set expandtab                             " expand <Tab> to spaces in insert mode
set softtabstop=2                         " set <Tab> to 2 spaces in insert mode
set list                                  " show <Tab> as ^I and EOL as $
set listchars=tab:\ \ ,trail:Â·            " list strings used for list mode
set spellfile=~/.vim/spellfile.utf-8.add  " file that `zg` adds good words to

" Auto Completion
set dictionary=/usr/share/dict/words    " list of dictionary files for keyword completion
set wildmode=list:longest               " specifies how command line completion works

" patterns to ignore for file name completion:
set wildignore=*.o,*.obj,*~,.hg,.git,.svn,.vim-tags,*.swp
set wildignore+=*.spl,*.DS_Store,*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*/tmp,*/log,*/vendor/bundle,*/vendor/cache
set wildignore+=*/bin,*.zip,*vim/backups*,*.vim_undo*


" custom mappings
nnoremap <F6> :set invpaste paste?<CR>
set pastetoggle=<F6>
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>
nnoremap <silent> <Leader>r :source ~/.vimrc<CR>:echo 'Reloaded ~/.vimrc'<CR>

" force my brain to stop using arrows and esc
map <Left> <nop>
map <Right> <nop>
map <Up> <nop>
map <Down> <nop>
" imap <esc> <nop>
inoremap jk <esc>

" wrap autocmd in a group to prevent duplicates
augroup personal
  autocmd!
  " flatfiles dont strip trailing white spaces
  autocmd BufWritePre * if &ft != 'text' | :%s/\s\+$//e
  " java tab/space config
  autocmd FileType java setlocal shiftwidth=8 softtabstop=8 tabstop=8 noexpandtab
  " open NERDTree when vim opens
  " autocmd vimenter * NERDTree
  " dont open stuff in nerdtree, however, go back to it if it was the focus
  " autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif
augroup END
" }}}

" Vim-Plug (replacd neobundle) {{{
" ==========

" Automatically install it, if it's not installed yet.
if empty(glob('~/.config/nvim/autoload/plug.vim'))
  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Plug 'mileszs/ack.vim'
Plug 'airblade/vim-gitgutter'
Plug 'chriskempson/base16-vim'
" Plug 'dense-analysis/ale'
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neovim/nvim-lspconfig'
Plug 'fatih/vim-go'
" Plug 'junegunn/fzf'
" Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-emoji'
Plug 'lokaltog/vim-easymotion'
Plug 'liuchengxu/vista.vim'
Plug 'luochen1990/rainbow'
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'peitalin/vim-jsx-typescript'
Plug 'plasticboy/vim-markdown'
Plug 'preservim/nerdcommenter'
Plug 'prettier/vim-prettier'
Plug 'scrooloose/nerdtree'
Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-surround'
" Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'
Plug 'itchyny/lightline.vim'
Plug 'vim-ruby/vim-ruby'
Plug 'vim-scripts/L9'
Plug 'vim-scripts/ZoomWin'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/nvim-cmp'
Plug 'saadparwaiz1/cmp_luasnip'
Plug 'L3MON4D3/LuaSnip'
Plug 'github/copilot.vim'

Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim', { 'tag': 'latest'}

"Trying CoC instead of ctags
"Plug 'ludovicchabant/vim-gutentags'
"Plug 'majutsushi/tagbar'
" Due to santa, need to brew install fzf. If not at stripe, can use:
" Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'APZelos/blamer.nvim'

call plug#end()

" Display (Syntax, Indentation, Filetypes, etc)
" =============================================

filetype plugin on
filetype indent on

set termguicolors
if $TERM =~ '256'
  let base16colorspace=256
endif
" lightmode
colorscheme base16-material
" darkmode
" colorscheme base16-material

hi Comment      cterm=italic
hi Normal       ctermbg=NONE guibg=NONE
hi LineNr       ctermbg=NONE guibg=NONE
hi SignColumn   ctermbg=NONE guibg=NONE
hi ColorColumn  guibg=#33363b
hi Comment      guifg=#5C6370 ctermfg=59

" filetype overrides
augroup filetypes
  autocmd!
  " autocmd FileType * setlocal formatprg=
  autocmd BufReadPost * silent! lcd .
  " Docker
  autocmd BufNewFile,BufRead Dockerfile* set filetype=Dockerfile
  " Indent-based folding
  autocmd BufRead,BufNewFile,BufWrite *.{coffee,json,py,yaml,yml} set foldmethod=indent
  " JavaScript
  autocmd BufRead,BufNewFile,BufWrite *.{js.asp,es6,jsx,mjs} set filetype=javascript
  autocmd BufRead,BufNewFile,BufWrite .{babelrc,eslintrc,prettierrc} set filetype=json
  autocmd BufRead,BufNewFile,BufWrite {*bashrc*,*.bash} set filetype=sh
  autocmd BufWritePre *.js Prettier
  autocmd BufWritePre *.jsx Prettier
  " JSON
  autocmd BufNewFile,BufRead *.json set filetype=json
  autocmd FileType json setlocal formatprg=jq\ -sM\ .
  " Writing
  autocmd BufRead,BufNewFile,BufWrite *.md set syntax=markdown.vimwiki
  autocmd Filetype md set wrap linebreak nolist nonumber norelativenumber spell textwidth=80
  autocmd Filetype txt set wrap linebreak nolist spell textwidth=80
  "" Property lists
  autocmd BufRead,BufNewFile,BufWrite *.{plist,xml} set filetype=xml
  " Ruby
  autocmd BufRead,BufNewFile,BufWrite Brewfile set syntax=ruby
  autocmd BufRead,BufNewFile,BufWrite {Capfile,Gemfile,Guardfile,Procfile,Rakefile,Thorfile,Vagrantfile,.ru,.caprc,.irbrc,.jbuilder,.rake} set filetype=ruby
augroup END


" List Helpful (Custom) Commands:
" ===============================

" Copy filename to keyboard
nmap <leader><leader>cs :let @*=expand("%")<CR>
nmap <leader><leader>cl :let @*=expand("%:p")<CR>

" Pretty XML Indentation, not mapped, use :PrettyXML
function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " this will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

" URL Decoding, not mapped, use :URLDecode
function! URLDecode()
  exe "s/%2B/+/g"
  exe "s/%3D/=/g"
  exe "s/%0A//g"
endfunction
command! URLDecode call URLDecode()

" Fix the issue where :W doesn't save.
command! W  write

" LUA LSP STUFF

lua << EOF

  local lspconfig = require('lspconfig')
  local lsp_servers = {
		'eslint', -- https://github.com/hrsh7th/vscode-langservers-extracted
		'html', -- https://github.com/hrsh7th/vscode-langservers-extracted
		'jsonls', -- https://github.com/hrsh7th/vscode-langservers-extracted
		'tsserver', -- https://github.com/typescript-language-server/typescript-language-server
		-- 'denols', -- https://github.com/denoland/deno
	}

	for _, lsp in ipairs(lsp_servers) do
		lspconfig[lsp].setup {
			on_attach = lspconfig_on_attach,
			capabilities = lspconfig_capabilities,
		}
	end

  local luasnip = require 'LuaSnip'

  local has_words_before = function()
		local line, col = unpack(vim.api.nvim_win_get_cursor(0))
		return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
	end

  -- nvim-cmp
  local cmp = require 'cmp'
	cmp.setup {
		snippet = {
			expand = function(args)
				luasnip.lsp_expand(args.body)
			end,
		},
		preselect = cmp.PreselectMode.None,
		mapping = cmp.mapping.preset.insert({
			['<C-p>'] = cmp.mapping.select_prev_item(),
			['<C-n>'] = cmp.mapping.select_next_item(),
			['<C-d>'] = cmp.mapping.scroll_docs(-4),
			['<C-f>'] = cmp.mapping.scroll_docs(4),
			['<C-Space>'] = cmp.mapping.complete(),
			['<C-e>'] = cmp.mapping.close(),
			['<CR>'] = cmp.mapping.confirm {
				behavior = cmp.ConfirmBehavior.Replace,
				select = true,
			},
			['<Tab>'] = function(fallback)
				if cmp.visible() then
				cmp.select_next_item()
				elseif luasnip.expand_or_jumpable() then
				luasnip.expand_or_jump()
				elseif has_words_before() then
				cmp.complete()
				else
				fallback()
				end
			end,
			['<S-Tab>'] = function(fallback)
				if cmp.visible() then
				cmp.select_prev_item()
				elseif luasnip.jumpable(-1) then
				luasnip.jump(-1)
				else
				fallback()
				end
			end,
		}),
		sources = {
			{ name = 'nvim_lsp' },
			{ name = 'luasnip' },
		},
	}

EOF
